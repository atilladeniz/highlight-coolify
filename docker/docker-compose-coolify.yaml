version: '3'

# Highlight.io services for Coolify deployment
services:
  # Infrastructure services
  clickhouse:
    image: ${CLICKHOUSE_IMAGE_NAME}
    restart: on-failure
    expose:
      - 9000
    volumes:
      - clickhouse-data:/var/lib/clickhouse
    environment:
      - TZ=${TZ}

  zookeeper:
    image: ${ZOOKEEPER_IMAGE_NAME}
    restart: on-failure
    expose:
      - 2181
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
      - TZ=${TZ}

  kafka:
    image: ${KAFKA_IMAGE_NAME}
    restart: on-failure
    expose:
      - 9092
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=${KAFKA_ADVERTISED_LISTENERS}
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - TZ=${TZ}
    depends_on:
      - zookeeper

  postgres:
    image: ${POSTGRES_IMAGE_NAME}
    restart: on-failure
    expose:
      - 5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${PSQL_PASSWORD}
      - POSTGRES_USER=${PSQL_USER}
      - POSTGRES_DB=${PSQL_DB}
      - TZ=${TZ}

  redis:
    image: ${REDIS_IMAGE_NAME}
    restart: on-failure
    expose:
      - 6379
    volumes:
      - redis-data:/data
    environment:
      - TZ=${TZ}

  collector:
    build:
      context: .
      args:
        - OTEL_COLLECTOR_ALPINE_IMAGE_NAME=${OTEL_COLLECTOR_ALPINE_IMAGE_NAME}
        - OTEL_COLLECTOR_IMAGE_NAME=${OTEL_COLLECTOR_IMAGE_NAME}
    restart: on-failure
    expose:
      - 4318
    environment:
      - TZ=${TZ}

  predictions:
    build:
      context: .
    restart: on-failure
    environment:
      - TZ=${TZ}

  # Application services
  backend:
    image: ${BACKEND_IMAGE_NAME}
    restart: on-failure
    expose:
      - 8082
    volumes:
      - highlight-data:/highlight-data
      - ../backend/env.enc:/build/env.enc
      - ../backend/env.enc.dgst:/build/env.enc.dgst
      - ../backend/localhostssl/server.key:/build/localhostssl/server.key
      - ../backend/localhostssl/server.crt:/build/localhostssl/server.crt
    env_file: .env
    depends_on:
      - clickhouse
      - kafka
      - postgres
      - redis
      - collector
      - predictions
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.routers.backend.rule=Host(`${REACT_APP_FRONTEND_URI}`) && PathPrefix(`/private`, `/public`, `/health`)
      - traefik.http.routers.backend.entrypoints=http
      - traefik.http.routers.backend-secure.rule=Host(`${REACT_APP_FRONTEND_URI}`) && PathPrefix(`/private`, `/public`, `/health`)
      - traefik.http.routers.backend-secure.entrypoints=https
      - traefik.http.routers.backend-secure.tls=true
      - traefik.http.routers.backend-secure.tls.certresolver=letsencrypt
      - traefik.http.services.backend.loadbalancer.server.port=8082

  frontend:
    image: ${FRONTEND_IMAGE_NAME}
    restart: on-failure
    expose:
      - 3000
      - 6006
      - 8080
    volumes:
      - ../backend/localhostssl/server.key:/etc/ssl/private/ssl-cert.key
      - ../backend/localhostssl/server.pem:/etc/ssl/certs/ssl-cert.pem
    env_file: .env
    depends_on:
      - backend
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.routers.frontend.rule=Host(`${REACT_APP_FRONTEND_URI}`)
      - traefik.http.routers.frontend.entrypoints=http
      - traefik.http.routers.frontend-secure.rule=Host(`${REACT_APP_FRONTEND_URI}`)
      - traefik.http.routers.frontend-secure.entrypoints=https
      - traefik.http.routers.frontend-secure.tls=true
      - traefik.http.routers.frontend-secure.tls.certresolver=letsencrypt
      - traefik.http.services.frontend.loadbalancer.server.port=3000

volumes:
  highlight-data:
  clickhouse-data:
  postgres-data:
  redis-data:
