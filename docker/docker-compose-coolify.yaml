version: '3'

# Highlight.io services for Coolify deployment
services:
  # Infrastructure services
  clickhouse:
    image: ${CLICKHOUSE_IMAGE_NAME}
    restart: on-failure
    expose:
      - 9000
    volumes:
      - clickhouse-data:/var/lib/clickhouse
    environment:
      - TZ=${TZ}
      - SERVICE_PASSWORD_CLICKHOUSE=${SERVICE_PASSWORD_CLICKHOUSE}
    networks:
      - highlight-network
    labels:
      - coolify.managed=true
      - coolify.type=service
      - coolify.applicationId=${COOLIFY_APP_ID:-1}

  zookeeper:
    image: ${ZOOKEEPER_IMAGE_NAME}
    restart: on-failure
    expose:
      - 2181
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
      - TZ=${TZ}
    networks:
      - highlight-network
    labels:
      - coolify.managed=true
      - coolify.type=service
      - coolify.applicationId=${COOLIFY_APP_ID:-1}

  kafka:
    image: ${KAFKA_IMAGE_NAME}
    restart: on-failure
    expose:
      - 9092
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=${KAFKA_ADVERTISED_LISTENERS:-PLAINTEXT://kafka:9092}
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - TZ=${TZ}
    depends_on:
      - zookeeper
    networks:
      - highlight-network
    labels:
      - coolify.managed=true
      - coolify.type=service
      - coolify.applicationId=${COOLIFY_APP_ID:-1}

  postgres:
    image: ${POSTGRES_IMAGE_NAME}
    restart: on-failure
    expose:
      - 5432
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${PSQL_PASSWORD:-postgres}
      - POSTGRES_USER=${PSQL_USER:-postgres}
      - POSTGRES_DB=${PSQL_DB:-postgres}
      - TZ=${TZ}
      - SERVICE_PASSWORD_DB=${SERVICE_PASSWORD_DB}
    networks:
      - highlight-network
    labels:
      - coolify.managed=true
      - coolify.type=service
      - coolify.applicationId=${COOLIFY_APP_ID:-1}

  redis:
    image: ${REDIS_IMAGE_NAME}
    restart: on-failure
    expose:
      - 6379
    volumes:
      - redis-data:/data
    environment:
      - TZ=${TZ}
      - SERVICE_PASSWORD_REDIS=${SERVICE_PASSWORD_REDIS}
    networks:
      - highlight-network
    labels:
      - coolify.managed=true
      - coolify.type=service
      - coolify.applicationId=${COOLIFY_APP_ID:-1}

  collector:
    image: otel/opentelemetry-collector-contrib:0.120.0
    restart: on-failure
    expose:
      - 4318
    environment:
      - TZ=${TZ}
    command: ["--config=/etc/otel/config.yaml"]
    volumes:
      - collector-config:/etc/otel
      - type: bind
        source: ./otel-config.yaml
        target: /etc/otel/config.yaml
        content: |
          receivers:
            otlp:
              protocols:
                http:
                  endpoint: 0.0.0.0:4318
          processors:
            batch:
              timeout: 1s
          exporters:
            logging:
              loglevel: debug
          service:
            pipelines:
              traces:
                receivers: [otlp]
                processors: [batch]
                exporters: [logging]
    networks:
      - highlight-network
    labels:
      - coolify.managed=true
      - coolify.type=service
      - coolify.applicationId=${COOLIFY_APP_ID:-1}
      - traefik.enable=true
      - traefik.http.routers.collector.rule=Host(`collector-${SERVICE_FQDN_FRONTEND}`) || PathPrefix(`/v1/metrics`)
      - traefik.http.routers.collector.entrypoints=http
      - traefik.http.services.collector.loadbalancer.server.port=4318

  predictions:
    build:
      context: .
      dockerfile: ./packages/predictions/predictions.Dockerfile
    restart: on-failure
    expose:
      - 5001
    environment:
      - TZ=${TZ}
      - SERVICE_FQDN_PREDICTIONS
    networks:
      - highlight-network
    labels:
      - coolify.managed=true
      - coolify.type=service
      - coolify.applicationId=${COOLIFY_APP_ID:-1}
      - traefik.enable=true
      - traefik.http.routers.predictions.rule=Host(`${SERVICE_FQDN_PREDICTIONS}`)
      - traefik.http.routers.predictions.entrypoints=http
      - traefik.http.services.predictions.loadbalancer.server.port=5001
      
  # Application services
  backend:
    image: ${BACKEND_IMAGE_NAME}
    restart: on-failure
    expose:
      - 8082
    volumes:
      - highlight-data:/highlight-data
    env_file: .env
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${PSQL_USER:-postgres}
      - POSTGRES_PASSWORD=${PSQL_PASSWORD:-postgres}
      - POSTGRES_DB=${PSQL_DB:-postgres}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:9092
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_PORT=9000
      - COLLECTOR_ENDPOINT=http://collector:4318
      - PREDICTIONS_ENDPOINT=http://predictions:5001
      - SERVICE_FQDN_BACKEND=/private,/public,/health
      - SERVICE_PASSWORD_BACKEND=${SERVICE_PASSWORD_BACKEND}
      - REDIS_PASSWORD=${SERVICE_PASSWORD_REDIS}
      - DB_PASSWORD=${SERVICE_PASSWORD_DB}
    depends_on:
      - clickhouse
      - kafka
      - postgres
      - redis
      - collector
      - predictions
    labels:
      - coolify.managed=true
      - coolify.type=application
      - coolify.applicationId=${COOLIFY_APP_ID:-1}
      - traefik.enable=true
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.routers.backend.rule=Host(`${REACT_APP_FRONTEND_URI}`) && PathPrefix(`/private`, `/public`, `/health`)
      - traefik.http.routers.backend.entrypoints=http
      - traefik.http.routers.backend-secure.rule=Host(`${REACT_APP_FRONTEND_URI}`) && PathPrefix(`/private`, `/public`, `/health`)
      - traefik.http.routers.backend-secure.entrypoints=https
      - traefik.http.routers.backend-secure.tls=true
      - traefik.http.routers.backend-secure.tls.certresolver=letsencrypt
      - traefik.http.services.backend.loadbalancer.server.port=8082
    networks:
      - highlight-network

  frontend:
    image: ${FRONTEND_IMAGE_NAME}
    restart: on-failure
    expose:
      - 3000
      - 6006
      - 8080
    env_file: .env
    environment:
      - SERVICE_FQDN_FRONTEND
      - REACT_APP_PRIVATE_GRAPH_URI=http://backend:8082/private
      - REACT_APP_PUBLIC_GRAPH_URI=http://backend:8082/public
      - BACKEND_URL=http://backend:8082
      - AUTH_SECRET=${SERVICE_PASSWORD_AUTH}
    depends_on:
      - backend
    labels:
      - coolify.managed=true
      - coolify.type=application
      - coolify.applicationId=${COOLIFY_APP_ID:-1}
      - traefik.enable=true
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.routers.frontend.rule=Host(`${REACT_APP_FRONTEND_URI}`)
      - traefik.http.routers.frontend.entrypoints=http
      - traefik.http.routers.frontend-secure.rule=Host(`${REACT_APP_FRONTEND_URI}`)
      - traefik.http.routers.frontend-secure.entrypoints=https
      - traefik.http.routers.frontend-secure.tls=true
      - traefik.http.routers.frontend-secure.tls.certresolver=letsencrypt
      - traefik.http.services.frontend.loadbalancer.server.port=3000
    networks:
      - highlight-network

volumes:
  highlight-data:
  clickhouse-data:
  postgres-data:
  redis-data:
  collector-config:

networks:
  highlight-network:
    driver: bridge
    external: ${USE_EXTERNAL_NETWORK:-false}
    name: ${NETWORK_NAME:-highlight-network}
    labels:
      - coolify.managed=true
