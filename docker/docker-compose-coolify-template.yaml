version: '3.8'

services:
  clickhouse:
    image: clickhouse/clickhouse-server:24.3.15.72-alpine
    restart: on-failure
    expose:
      - 9000
    volumes:
      - clickhouse-data:/var/lib/clickhouse
    environment:
      - TZ=${TZ:-America/Los_Angeles}
      - CLICKHOUSE_DATABASE=${CLICKHOUSE_DATABASE:-default}
      - CLICKHOUSE_USERNAME=${CLICKHOUSE_USERNAME:-default}
      - CLICKHOUSE_PASSWORD=${SERVICE_PASSWORD_CLICKHOUSE} # Coolify managed password
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 http://localhost:8123/ping || nc -z localhost 8123"]
    networks:
      - highlight-network
    labels:
      - coolify.managed=true
      - coolify.type=service
      - coolify.applicationId=1

  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.0
    restart: on-failure
    expose:
      - 2181
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
      - TZ=${TZ:-America/Los_Angeles}
    healthcheck:
      test: ["CMD", "bash", "-c", "echo stat | nc localhost 2181"]
    networks:
      - highlight-network
    labels:
      - coolify.managed=true
      - coolify.type=service
      - coolify.applicationId=1

  kafka:
    image: confluentinc/cp-kafka:7.7.0
    restart: on-failure
    expose:
      - 9092
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=${KAFKA_ADVERTISED_LISTENERS:-PLAINTEXT://kafka:9092}
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TOPIC=${KAFKA_TOPIC:-dev}
      - TZ=${TZ:-America/Los_Angeles}
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
    networks:
      - highlight-network
    labels:
      - coolify.managed=true
      - coolify.type=service
      - coolify.applicationId=1

  postgres:
    image: ankane/pgvector:v0.5.1
    restart: on-failure
    expose:
      - 5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${SERVICE_PASSWORD_POSTGRES} # Coolify managed password
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - TZ=${TZ:-America/Los_Angeles}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
    networks:
      - highlight-network
    labels:
      - coolify.managed=true
      - coolify.type=service
      - coolify.applicationId=1

  redis:
    image: redis:7.4.0
    restart: on-failure
    expose:
      - 6379
    volumes:
      - redis-data:/data
    environment:
      - TZ=${TZ:-America/Los_Angeles}
      - SERVICE_PASSWORD_REDIS=${SERVICE_PASSWORD_REDIS} # Coolify managed password
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
    networks:
      - highlight-network
    labels:
      - coolify.managed=true
      - coolify.type=service
      - coolify.applicationId=1

  collector:
    image: otel/opentelemetry-collector-contrib:0.120.0
    restart: on-failure
    expose:
      - 4318
    environment:
      - TZ=${TZ:-America/Los_Angeles}
    command: ["--config=/etc/otel/config.yaml"]
    volumes:
      - collector-config:/etc/otel
      - type: config
        source: otel-collector-config
        target: /etc/otel/config.yaml
    healthcheck:
      test: ["CMD-SHELL", "netstat -tulpn | grep 4318 || nc -z localhost 4318"]
    networks:
      - highlight-network
    labels:
      - coolify.managed=true
      - coolify.type=service
      - coolify.applicationId=1
      - traefik.enable=true
      - traefik.http.routers.collector.rule=Host(`collector.${REACT_APP_FRONTEND_URI:-localhost:3000}`)
      - traefik.http.routers.collector.entrypoints=http
      - traefik.http.routers.collector-secure.rule=Host(`collector.${REACT_APP_FRONTEND_URI:-localhost:3000}`)
      - traefik.http.routers.collector-secure.entrypoints=https
      - traefik.http.routers.collector-secure.tls=true
      - traefik.http.routers.collector-secure.tls.certresolver=letsencrypt
      - traefik.http.services.collector.loadbalancer.server.port=4318

  predictions:
    build:
      context: .
      dockerfile: ./packages/predictions/predictions.Dockerfile
    restart: on-failure
    expose:
      - 5001
    environment:
      - TZ=${TZ:-America/Los_Angeles}
      - SERVICE_FQDN_PREDICTIONS=${SERVICE_FQDN_PREDICTIONS:-predictions.localhost:3000} # Default value for local dev
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5001/health || nc -z localhost 5001"]
    networks:
      - highlight-network
    labels:
      - coolify.managed=true
      - coolify.type=service
      - coolify.applicationId=1
      - traefik.enable=true
      - traefik.http.routers.predictions.rule=Host(`${SERVICE_FQDN_PREDICTIONS:-predictions.localhost:3000}`) # Dynamic Host from FQDN
      - traefik.http.routers.predictions.entrypoints=http
      - traefik.http.services.predictions.loadbalancer.server.port=5001

  backend:
    image: ghcr.io/highlight/highlight-backend:docker-v0.5.2
    container_name: backend
    restart: on-failure
    expose:
      - 8082
    volumes:
      - highlight-data:/highlight-data
      # Removed bind mounts for env.enc and env.enc.dgst
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${SERVICE_PASSWORD_POSTGRES} # Coolify managed password
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:9092
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_PORT=9000
      - COLLECTOR_ENDPOINT=http://collector:4318
      - PREDICTIONS_ENDPOINT=http://predictions:5001
      - SERVICE_FQDN_BACKEND=/private,/public,/health # Coolify FQDN Variable mit Pfaden
      - REDIS_PASSWORD=${SERVICE_PASSWORD_REDIS} # Coolify managed password
      - DB_PASSWORD=${SERVICE_PASSWORD_DB:-postgres} # Fallback if not set in Coolify UI
      - DISABLE_CORS=${DISABLE_CORS:-true}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD} # Coolify managed password
      - SSL=${SSL:-false}
      - ENV=${ENVIRONMENT:-production}
      - ON_PREM=true
      - OBJECT_STORAGE_FS=${OBJECT_STORAGE_FS:-/highlight-data}
      - EMAIL_OPT_OUT_SALT=${EMAIL_OPT_OUT_SALT:-salt}
      - REACT_APP_AUTH_MODE=${REACT_APP_AUTH_MODE:-password}
      - SESSION_FILE_PATH_PREFIX=${SESSION_FILE_PATH_PREFIX:-/tmp/}
    depends_on:
      clickhouse:
        condition: service_healthy
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      collector:
        condition: service_healthy
      predictions:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/health"]
    labels:
      - coolify.managed=true
      - coolify.type=application
      - coolify.applicationId=1
      - traefik.enable=true
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.routers.backend.rule=Host(`${REACT_APP_FRONTEND_URI:-localhost:3000}`) && PathPrefix(`/private`, `/public`, `/health`) # Dynamic Host from Frontend URI
      - traefik.http.routers.backend.entrypoints=http
      - traefik.http.routers.backend-secure.rule=Host(`${REACT_APP_FRONTEND_URI:-localhost:3000}`) && PathPrefix(`/private`, `/public`, `/health`) # Dynamic Host from Frontend URI
      - traefik.http.routers.backend-secure.entrypoints=https
      - traefik.http.routers.backend-secure.tls=true
      - traefik.http.routers.backend-secure.tls.certresolver=letsencrypt
      - traefik.http.services.backend.loadbalancer.server.port=8082
    networks:
      - highlight-network

  frontend:
    image: ghcr.io/highlight/highlight-frontend:docker-v0.5.2
    container_name: frontend
    restart: on-failure
    expose:
      - 3000
      - 6006
      - 8080
    environment:
      - SERVICE_FQDN_FRONTEND=${SERVICE_FQDN_FRONTEND:-localhost:3000} # Default for local dev
      - REACT_APP_FRONTEND_URI=${REACT_APP_FRONTEND_URI:-http://localhost:3000} # Default for local dev
      - REACT_APP_PRIVATE_GRAPH_URI=https://${REACT_APP_FRONTEND_URI:-localhost:3000}/private # Dynamic URI from Frontend URI
      - REACT_APP_PUBLIC_GRAPH_URI=https://${REACT_APP_FRONTEND_URI:-localhost:3000}/public # Dynamic URI from Frontend URI
      - REACT_APP_OTLP_ENDPOINT=http://collector.${REACT_APP_FRONTEND_URI:-localhost:3000} # Dynamic Endpoint from Frontend URI
      - BACKEND_URL=https://${REACT_APP_FRONTEND_URI:-localhost:3000} # Dynamic URL from Frontend URI
      - AUTH_SECRET=${SERVICE_PASSWORD_AUTH} # Coolify managed password
      - REACT_APP_AUTH_MODE=${REACT_APP_AUTH_MODE:-password}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD} # Coolify managed password
      - DISABLE_CORS=${DISABLE_CORS:-true}
      - SSL=${SSL:-false}
      - REACT_APP_IN_DOCKER=${REACT_APP_IN_DOCKER:-true}
      - REACT_APP_DISABLE_ANALYTICS=${REACT_APP_DISABLE_ANALYTICS:-false}
      - REACT_APP_FRONTEND_ORG=${REACT_APP_FRONTEND_ORG:-1}
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
    labels:
      - coolify.managed=true
      - coolify.type=application
      - coolify.applicationId=1
      - traefik.enable=true
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.routers.frontend.rule=Host(`${REACT_APP_FRONTEND_URI:-localhost:3000}`) # Dynamic Host from Frontend URI
      - traefik.http.routers.frontend.entrypoints=http
      - traefik.http.routers.frontend-secure.rule=Host(`${REACT_APP_FRONTEND_URI:-localhost:3000}`) # Dynamic Host from Frontend URI
      - traefik.http.routers.frontend-secure.entrypoints=https
      - traefik.http.routers.frontend-secure.tls=true
      - traefik.http.routers.frontend-secure.tls.certresolver=letsencrypt
      - traefik.http.services.frontend.loadbalancer.server.port=3000

volumes:
  highlight-data:
  clickhouse-data:
  postgres-data:
  redis-data:
  collector-config:

networks:
  highlight-network:
    driver: bridge
    external: false
    name: highlight-network
    labels:
      - coolify.managed=true

configs:
  otel-collector-config:
    content: |
      receivers:
        otlp:
          protocols:
            http:
              endpoint: 0.0.0.0:4318
              cors:
                allowed_origins:
                  - https://${SERVICE_FQDN_FRONTEND}
                  - http://${SERVICE_FQDN_FRONTEND}
                  - https://${REACT_APP_FRONTEND_URI:-localhost:3000}
                  - http://${REACT_APP_FRONTEND_URI:-localhost:3000}
                  - "*"
      processors:
        batch:
          timeout: 1s
      exporters:
        logging:
          loglevel: debug
      service:
        pipelines:
          traces:
            receivers: [otlp]
            processors: [batch]
            exporters: [logging]